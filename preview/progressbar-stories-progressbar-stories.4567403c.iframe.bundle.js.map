{"version":3,"file":"progressbar-stories-progressbar-stories.4567403c.iframe.bundle.js","mappings":";;;AAwBA;AAQA;AAIA;;AAEA;;;;AAIA;AAOA;AAOA;AACA;;;ACpDA;;ACwCA;AAQA;AACA;AACA;;AAEA;;AAOA","sources":["webpack://@spectrum-css/preview/../components/progressbar/stories/template.js","webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/fieldlabel/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { capitalize, lowerCase } from \"lodash-es\";\n\nimport { Template as FieldLabel } from \"@spectrum-css/fieldlabel/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-ProgressBar\",\n\tcustomClasses = [],\n\tlabelPosition,\n\tstaticColor,\n\tcustomWidth,\n\tindeterminate,\n\tlabel,\n\tvalue,\n\tcustomStyles = {},\n\tsize = \"m\",\n\t...globals\n}) => html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${labelPosition}Label`]: typeof labelPosition !== \"undefined\",\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]: typeof staticColor !== \"undefined\",\n\t\t\t\t[`${rootClass}--${indeterminate}`]: typeof indeterminate !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${styleMap({\n\t\t\t\t\"width\": customWidth,\n\t\t\t\t...customStyles,\n\t\t\t})}\n\t\t\tvalue=\"${value}%\"\n\t\t\trole=\"progressbar\"\n\t\t\taria-valuenow=\"${value}%\"\n\t\t\taria-valuemin=\"0\"\n\t\t\taria-valuemax=\"100\"\n\t\t>\n\t\t\t${FieldLabel({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\tlabel,\n\t\t\t\talignment: \"\",\n\t\t\t\tcustomClasses: [`${rootClass}-label`],\n\t\t\t})}\n\t\t\t${FieldLabel({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\tlabel: indeterminate ? \"\" : `${value}%`,\n\t\t\t\talignment: \"\",\n\t\t\t\tcustomClasses: [`${rootClass}-percentage`],\n\t\t\t})}\n\t\t\t<div class=\"${rootClass}-track\">\n\t\t\t\t<div class=\"${rootClass}-fill\" style=\"width: ${value}%;\"></div>\n\t\t\t</div>\n\t\t</div>\n\t`;\n",null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-FieldLabel\",\n\tcustomClasses = [],\n\tsize = \"m\",\n\tlabel,\n\tid,\n\tforInput,\n\talignment,\n\tisDisabled,\n\tisRequired,\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tif (!label) {\n\t\tconsole.warn(\"FieldLabel: please provide a label for the field label.\");\n\t\treturn html``;\n\t}\n\n\tlet iconName = \"Asterisk100\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonName = \"Asterisk100\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonName = \"Asterisk200\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonName = \"Asterisk300\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonName = \"Asterisk100\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${alignment}`]: typeof alignment !== \"undefined\",\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${styleMap(customStyles)}\n\t\t\tid=${ifDefined(id)}\n\t\t\tfor=${ifDefined(forInput)}\n\t\t>\n\t\t\t${label}${when(isRequired, () => Icon({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\ticonName,\n\t\t\t\tcustomClasses: [`${rootClass}-UIIcon`, `${rootClass}-requiredIcon`],\n\t\t\t}))}\n\t\t</label>\n\t`;\n};\n"],"names":[],"sourceRoot":""}