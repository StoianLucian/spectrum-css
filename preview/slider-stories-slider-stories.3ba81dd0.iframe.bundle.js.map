{"version":3,"file":"slider-stories-slider-stories.3ba81dd0.iframe.bundle.js","mappings":";;;;;;;;;AAiDA;;AAWA;AACA;AAOA;AAMA;AACA;;AAIA;;AAOA;AAMA;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAIA;AAYA;AACA;AAKA;AACA;AACA;AAIA;;;AAMA;;AAEA;AACA;;AAEA;AASA;;AAEA;;;AAGA;;AAIA;;;;;;AAMA;AAKA;;AAEA;AA2BA;AAIA;AAWA;;AAIA;;AAEA;AACA;;;AAGA;;;AAGA;;AAIA;;;AAGA;;ACvMA;AAQA;AACA;AACA;;AAEA;;AAOA","sources":["webpack://@spectrum-css/preview/../components/slider/stories/template.js","webpack://@spectrum-css/preview/../components/fieldlabel/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs, useGlobals } from \"@storybook/preview-api\";\n\nimport { Template as FieldLabel } from \"@spectrum-css/fieldlabel/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Slider\",\n\tsize,\n\tlabel,\n\tmin = 0,\n\tmax = 10,\n\tstep = 2,\n\tvalues = [],\n\tvariant,\n\tlabelPosition,\n\tfillColor = \"rgb(213, 213, 213)\",\n\tshowTicks = false,\n\tisDisabled = false,\n\tisFocused = false,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n\t...globals\n}) => {\n\n\tconst [, updateArgs] = useArgs();\n\tconst [{ textDirection }] = useGlobals();\n\n\tconst rtl = !!(textDirection === \"rtl\");\n\tconst rangeLength = max - min;\n\tconst centerPoint = rangeLength / 2 + min;\n\tconst isRamp = variant === \"ramp\";\n\tconst rampSVG = html`\n\t\t<svg\n\t\t\tviewBox=\"0 0 240 16\"\n\t\t\tpreserveAspectRatio=\"none\"\n\t\t\taria-hidden=\"true\"\n\t\t\tfocusable=\"false\"\n\t\t>\n\t\t\t<path d=\"M240,4v8c0,2.3-1.9,4.1-4.2,4L1,9C0.4,9,0,8.5,0,8c0-0.5,0.4-1,1-1l234.8-7C238.1-0.1,240,1.7,240,4z\"></path>\n\t\t</svg>`;\n\n\tconst getPosition = (v) => ((v - min) / rangeLength) * 100;\n\n\tconst getWidth = (start, end) => {\n\t\tconst distance = end > start ? end - start : start - end;\n\t\treturn (distance / rangeLength) * 100;\n\t};\n\n\tfunction renderTrack({ position, width }) {\n\t\tconst direction = rtl ? \"right\" : \"left\";\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=\"${rootClass}-track\"\n\t\t\t\tstyle=${ifDefined(\n\t\t\t\t\tstyleMap({\n\t\t\t\t\t\t[direction]: position ? `${position}%` : undefined,\n\t\t\t\t\t\twidth: width ? `${width}%` : undefined,\n\t\t\t\t\t})\n\t\t\t\t)}\n\t\t\t></div>`;\n\t}\n\n\tfunction renderTick({ from, to }) {\n\t\tconst ticks = [];\n\t\tfor (let i = from; i <= to; i += step) {\n\t\t\tticks.push(html`\n\t\t\t\t<div class=\"${rootClass}-tick\">\n\t\t\t\t\t<div class=\"${rootClass}-tickLabel\">${i}</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t}\n\t\treturn html`<div class=\"${rootClass}-ticks\">${ticks}</div>`;\n\t}\n\n\tfunction renderHandle({ position, value, idx = 0 }) {\n\t\tconst direction = rtl ? \"right\" : \"left\";\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-handle`]: true,\n\t\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\t\"is-dragged\": false, // note: this only applies z-index; no other styles\n\t\t\t\t\t\"is-tophandle\": false, // todo: when is this supposed to be used\n\t\t\t\t})}\n\t\t\t\tstyle=${ifDefined(\n\t\t\t\t\tstyleMap({\n\t\t\t\t\t\t[direction]: position ? `${position}%` : undefined,\n\t\t\t\t\t})\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tid=${ifDefined(id ? `${id}-input-${idx + 1}` : undefined)}\n\t\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t\tstep=${ifDefined(step)}\n\t\t\t\t\tmin=${ifDefined(min)}\n\t\t\t\t\tmax=${ifDefined(max)}\n\t\t\t\t\t@change=${(event) => {\n\t\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\t\tupdateArgs({ value: event.target.value });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>`;\n\t}\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--ramp`]: variant === \"ramp\",\n\t\t\t\t[`${rootClass}--range`]: values.length > 1,\n\t\t\t\t[`${rootClass}--filled`]: variant === \"filled\",\n\t\t\t\t[`${rootClass}--tick`]: showTicks,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t[`${rootClass}--sideLabel`]: labelPosition === \"side\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${styleMap({\n\t\t\t\t\"max-width\": \"240px\",\n\t\t\t\t[\"--spectrum-slider-track-color\"]: fillColor,\n\t\t\t\t...customStyles,\n\t\t\t})}\n\t\t\trole=${ifDefined(values.length > 1 ? \"group\" : undefined)}\n\t\t\taria-labelledby=${ifDefined(label && id ? `${id}-label` : undefined)}\n\t\t\t@focusin=${() => {\n\t\t\t\tconst focusClass = { isFocused: true };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t\t@focusout=${() => {\n\t\t\t\tconst focusClass = { isFocused: false };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t>\n\t\t\t<!-- Label region -->\n\t\t\t${when(label, () => html`\n\t\t\t<div\n\t\t\t\tclass=\"${rootClass}-labelContainer\"\n\t\t\t\trole=${ifDefined(values.length > 1 ? \"presentation\" : undefined)}\n\t\t\t>\n\t\t\t\t${FieldLabel({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\tlabel,\n\t\t\t\t\tisDisabled,\n\t\t\t\t\tid: id ? `${id}-label` : undefined,\n\t\t\t\t\tforInput: id ? `${id}-1` : undefined,\n\t\t\t\t\tcustomClasses: [`${rootClass}-label`],\n\t\t\t\t})}\n\t\t\t\t${when(values.length && labelPosition != \"side\", () => html`\n\t\t\t\t<div\n\t\t\t\t\tclass=\"${rootClass}-value\"\n\t\t\t\t\trole=\"textbox\"\n\t\t\t\t\taria-readonly=\"true\"\n\t\t\t\t\taria-labelledby=${ifDefined(\n\t\t\t\t\t\tid && label ? `${id}-label` : undefined\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t${values[0]}${values.length > 1 ? ` - ${values[1]}` : \"\"}\n\t\t\t\t</div>`)}\n\t\t\t</div>`)}\n\n\t\t\t<!-- Slider controls -->\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-controls`]: true,\n\t\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\trole=${ifDefined(isRamp ? \"presentation\" : undefined)}\n\t\t\t>\n\t\t\t\t${values.map((value, idx) => {\n\t\t\t\t\tconst prevPoint = idx === 0 ? min : values[idx - 1];\n\t\t\t\t\tconst isFirst = idx === 0;\n\t\t\t\t\tconst isLast = idx === values.length - 1;\n\t\t\t\t\treturn [\n\t\t\t\t\t\t!isRamp\n\t\t\t\t\t\t\t? renderTrack({\n\t\t\t\t\t\t\t\t\tposition: getPosition(prevPoint),\n\t\t\t\t\t\t\t\t\twidth: getWidth(prevPoint, value),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\tisFirst && isRamp\n\t\t\t\t\t\t\t? html`<div class=\"${rootClass}-ramp\">${rampSVG}</div>`\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\tisFirst && showTicks && !isRamp\n\t\t\t\t\t\t\t? renderTick({ from: min, to: max })\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\trenderHandle({\n\t\t\t\t\t\t\tposition: getPosition(value),\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tisLast && !isRamp\n\t\t\t\t\t\t\t? renderTrack({ width: getWidth(value, max) })\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\tisLast && variant === \"offset\"\n\t\t\t\t\t\t\t? html` <div\n\t\t\t\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t\t\t\t[`${rootClass}-fill`]: true,\n\t\t\t\t\t\t\t\t\t\t[`${rootClass}-fill--right`]: !!(value > centerPoint),\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\tstyle=${ifDefined(\n\t\t\t\t\t\t\t\t\t\tstyleMap({\n\t\t\t\t\t\t\t\t\t\t\t[rtl ? \"right\" : \"left\"]: `${\n\t\t\t\t\t\t\t\t\t\t\t\tvalue > centerPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t? getPosition(centerPoint)\n\t\t\t\t\t\t\t\t\t\t\t\t\t: getPosition(value)\n\t\t\t\t\t\t\t\t\t\t\t}%`,\n\t\t\t\t\t\t\t\t\t\t\twidth: `${getWidth(value, centerPoint)}%`,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t  ></div>`\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t];\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t${when(values.length && labelPosition === \"side\", () => html`\n\t\t\t<div\n\t\t\t\tclass=\"${rootClass}-labelContainer\"\n\t\t\t\trole=${ifDefined(values.length > 1 ? \"presentation\" : undefined)}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"${rootClass}-value\"\n\t\t\t\t\trole=\"textbox\"\n\t\t\t\t\taria-readonly=\"true\"\n\t\t\t\t\taria-labelledby=${ifDefined(\n\t\t\t\t\t\tid && label ? `${id}-label` : undefined\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t${values[0]}${values.length > 1 ? ` - ${values[1]}` : \"\"}\n\t\t\t\t</div>\n\t\t\t</div>`)}\n\t\t</div>`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-FieldLabel\",\n\tcustomClasses = [],\n\tsize = \"m\",\n\tlabel,\n\tid,\n\tforInput,\n\talignment,\n\tisDisabled,\n\tisRequired,\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tif (!label) {\n\t\tconsole.warn(\"FieldLabel: please provide a label for the field label.\");\n\t\treturn html``;\n\t}\n\n\tlet iconName = \"Asterisk100\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonName = \"Asterisk100\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonName = \"Asterisk200\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonName = \"Asterisk300\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonName = \"Asterisk100\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${alignment}`]: typeof alignment !== \"undefined\",\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${styleMap(customStyles)}\n\t\t\tid=${ifDefined(id)}\n\t\t\tfor=${ifDefined(forInput)}\n\t\t>\n\t\t\t${label}${when(isRequired, () => Icon({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\ticonName,\n\t\t\t\tcustomClasses: [`${rootClass}-UIIcon`, `${rootClass}-requiredIcon`],\n\t\t\t}))}\n\t\t</label>\n\t`;\n};\n"],"names":[],"sourceRoot":""}