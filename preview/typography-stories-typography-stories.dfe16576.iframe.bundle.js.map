{"version":3,"file":"typography-stories-typography-stories.dfe16576.iframe.bundle.js","mappings":";;;AA8HA;AAOA;ACrGA;;AAmBA;AAIA;AACA;AAsBA;AAIA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAKA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AACA;AACA;AAKA","sources":["webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/typography/stories/template.js"],"sourcesContent":[null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { capitalize } from \"lodash-es\";\n\nimport \"@spectrum-css/typography/index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Typography\",\n\tsemantics = \"body\",\n\tsize = \"m\",\n\tvariant,\n\tweight,\n\tglyph = \"sans-serif\",\n\tid,\n\tcontent = [],\n\tcustomClasses = [],\n\tcustomStyles = {},\n}) => {\n\tif (!Array.isArray(content)) {\n\t\tcontent = [content];\n\t}\n\n\tconst contentLength = content.length;\n\n\t// If there is no content, return an empty string, no need for additional processing\n\tif (contentLength === 0) return html``;\n\n\tconst processedContent = html`\n\t\t${content.map((c) => {\n\t\t\t/* If the content is an object (but not a lit object), we need to merge the object with the template */\n\t\t\tif (typeof c !== \"string\" && (typeof c === \"object\" && !c._$litType$)) {\n\t\t\t\treturn Template({\n\t\t\t\t\trootClass,\n\t\t\t\t\tsemantics,\n\t\t\t\t\tsize,\n\t\t\t\t\tvariant,\n\t\t\t\t\tweight,\n\t\t\t\t\tglyph,\n\t\t\t\t\tid,\n\t\t\t\t\tcustomClasses,\n\t\t\t\t\t...c,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (typeof semantics === \"undefined\") {\n\t\t\t\treturn html`\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t\"spectrum-Typography\": true,\n\t\t\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t\t>${c}</div>`;\n\t\t\t}\n\n\t\t\trootClass = `spectrum-${capitalize(semantics)}`;\n\n\t\t\tconst classes = {\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${glyph}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" &&\n\t\t\t\t\ttypeof glyph !== \"undefined\" &&\n\t\t\t\t\tglyph !== \"sans-serif\",\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" && typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${weight}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" && typeof weight !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t};\n\n\t\t\t/* Variants are additive and exist within the wrapper tags */\n\t\t\tif (variant && Array.isArray(variant)) {\n\t\t\t\tif ([\"strong\", \"emphasized\"].every((i) => variant.includes(i))) {\n\t\t\t\t\tc = html`<span\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t[`${rootClass}-strong`]: true,\n\t\t\t\t\t\t[`${rootClass}-emphasized`]: true,\n\t\t\t\t\t})}\n\t\t\t\t\t\t>${c}</span\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t\telse if (variant.includes(\"strong\")) {\n\t\t\t\t\tc = html`<strong\n\t\t\t\t\t\tclass=${classMap({ [`${rootClass}-strong`]: true })}\n\t\t\t\t\t\t>${c}</strong\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t\telse if (variant.includes(\"emphasized\")) {\n\t\t\t\t\tc = html`<em\n\t\t\t\t\t\tclass=${classMap({ [`${rootClass}-emphasized`]: true })}\n\t\t\t\t\t\t>${c}</em\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (semantics === \"heading\")\n\t\t\t\treturn html`\n\t\t\t\t\t<h2 class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</h2>\n\t\t\t\t`;\n\n\t\t\tif (semantics === \"body\")\n\t\t\t\treturn html`\n\t\t\t\t\t<p class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</p>\n\t\t\t\t`;\n\n\t\t\tif (semantics === \"code\")\n\t\t\t\treturn html`\n\t\t\t\t\t<code class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</code>\n\t\t\t\t`;\n\n\t\t\treturn html`\n\t\t\t\t<span class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</span>\n\t\t\t`;\n\t\t})}\n\t`;\n\n\t/** Wrap items with the spectrum-Typography wrapper if there are more than 1 items (this ensures correct margins) */\n\treturn html`${when(\n\t\tcontentLength > 1,\n\t\t() => html`<div class=\"spectrum-Typography\" id=${ifDefined(id)}>${processedContent}</div>`,\n\t\t() => processedContent\n\t)}`;\n};\n"],"names":[],"sourceRoot":""}