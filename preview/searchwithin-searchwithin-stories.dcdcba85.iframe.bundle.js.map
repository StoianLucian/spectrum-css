{"version":3,"file":"searchwithin-searchwithin-stories.dcdcba85.iframe.bundle.js","mappings":";;;;;;;;;;;;AA8OA;AAOA;;AAEA;AAcA;AAcA;AAKA;;AAgCA;;ACtQA;AAWA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA;;;AC5EA;AAQA;AACA;AACA;;AAEA;AACA;;;;;AChBA;AASA;;;AASA;AACA;AASA;;;;ACDA;AAQA;AACA;AACA;;AAEA;;AAOA;;AC3CA;AAQA;AACA;;AAEA;AAOA;;;;ACgNA;AAQA;AACA;AACA;AACA;AACA;;AAEA;;AAhFA;;;AAGA;;AAQA;;AAOA;AAEA;AACA;AACA;;AAEA;AAEA;AAtBA;AACA;AACA;;AAEA;AAqBA;;AA4DA;;AAtOA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAUA;AAIA;AAMA;;AAGA;AAGA;AAWA;AACA;AAWA;;AAEA;AAWA;AAGA;AAEA;AAYA;AACA;;AAsIA;;AAeA;;AC3PA;AAYA;;AAEA;;AAEA;;AAIA;AACA;AAMA;AAQA;;AAQA;AAmDA;AAUA;AAEA;;AAsBA;;AAqBA;AAOA;AAWA;AAQA;ACvLA;;;AAsGA;AASA;;AAEA;AACA;;AAEA;AACA;;AAMA;;AChIA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;;AChCA;AAQA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;;AAEA;;ACWA;AAgBA;AACA;AACA;AAMA;AAMA;;AAEA;AAKA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAMA;;ACnIA;AACA;;;AAGA;AAKA;;AAEA","sources":["webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/checkbox/stories/template.js","webpack://@spectrum-css/preview/../components/clearbutton/stories/template.js","webpack://@spectrum-css/preview/../components/divider/stories/template.js","webpack://@spectrum-css/preview/../components/fieldlabel/stories/template.js","webpack://@spectrum-css/preview/../components/helptext/stories/template.js","webpack://@spectrum-css/preview/../components/menu/stories/template.js","webpack://@spectrum-css/preview/../components/picker/stories/template.js","webpack://@spectrum-css/preview/../components/popover/stories/template.js","webpack://@spectrum-css/preview/../components/progresscircle/stories/template.js","webpack://@spectrum-css/preview/../components/switch/stories/template.js","webpack://@spectrum-css/preview/../components/textfield/stories/template.js","webpack://@spectrum-css/preview/../components/tray/stories/template.js"],"sourcesContent":[null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/preview-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\tisInvalid = false,\n\tisReadOnly = false,\n\ttitle,\n\tvalue,\n\tid,\n\tariaLabelledby,\n\tcustomStyles = {},\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[\"is-indeterminate\"]: isIndeterminate,\n\t\t\t\t[\"is-disabled\"]: isDisabled|| isReadOnly,\n\t\t\t\t[\"is-invalid\"]: isInvalid,\n\t\t\t\t[\"is-readOnly\"]: isReadOnly,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\taria-labelledby=${ifDefined(ariaLabelledby)}\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled || isReadOnly}\n\t\t\t\ttitle=${ifDefined(title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-ClearButton\",\n\tisDisabled = false,\n\tsize = \"m\",\n\tstaticColor,\n\tid,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\t...globals\n}) => html`\n\t<button\n\t\ttype=\"reset\"\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t[`${rootClass}--overBackground`]: staticColor === \"white\",\n\t\t\t\"is-disabled\": isDisabled,\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\tid=${ifDefined(id)}\n\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t?disabled=${isDisabled}\n\t>\n\t\t<div class=\"${rootClass}-fill\">\n\t\t\t${Icon({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\ticonName: \"Cross\",\n\t\t\t\tcustomClasses: [`${rootClass}-icon`],\n\t\t\t})}\n\t\t</div>\n\t</button>\n`;\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\nimport { capitalize, lowerCase, upperCase } from \"lodash-es\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Divider\",\n\tsize = \"m\",\n\ttag = \"hr\",\n\tstaticColor,\n\tvertical = false,\n\tcustomClasses = [],\n}) => {\n\tif (tag === \"hr\") {\n\t\treturn html`\n    <hr\n      class=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${upperCase(size)}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n      style=${\n\t\t\t\tvertical === true\n\t\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t\t: \"\"\n\t\t\t}\n      role=\"separator\"\n      >\n    </hr>`;\n\t}\n\n\treturn html` <div\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\tstyle=${vertical === true\n\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t: \"\"}\n\t\trole=\"separator\"\n\t></div>`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-FieldLabel\",\n\tcustomClasses = [],\n\tsize = \"m\",\n\tlabel,\n\tid,\n\tforInput,\n\talignment,\n\tisDisabled,\n\tisRequired,\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tif (!label) {\n\t\tconsole.warn(\"FieldLabel: please provide a label for the field label.\");\n\t\treturn html``;\n\t}\n\n\tlet iconName = \"Asterisk100\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonName = \"Asterisk100\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonName = \"Asterisk200\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonName = \"Asterisk300\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonName = \"Asterisk100\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${alignment}`]: typeof alignment !== \"undefined\",\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${styleMap(customStyles)}\n\t\t\tid=${ifDefined(id)}\n\t\t\tfor=${ifDefined(forInput)}\n\t\t>\n\t\t\t${label}${when(isRequired, () => Icon({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\ticonName,\n\t\t\t\tcustomClasses: [`${rootClass}-UIIcon`, `${rootClass}-requiredIcon`],\n\t\t\t}))}\n\t\t</label>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-HelpText\",\n\tsize = \"m\",\n\tisDisabled = false,\n\thideIcon = false,\n\ttext,\n\tvariant,\n\tid,\n\tcustomClasses = [],\n\tcustomStyles = {},\n}) => html`\n\t<div\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t\"is-disabled\": isDisabled,\n\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t[`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\tstyle=${styleMap(customStyles)}\n\t\tid=${ifDefined(id)}\n\t>\n\t\t${!hideIcon && variant == \"negative\"\n\t\t\t? Icon({\n\t\t\t\ticonName: \"Alert\",\n\t\t\t\tsize,\n\t\t\t\tcustomClasses: [`${rootClass}-validationIcon`],\n\t\t\t})\n\t\t\t: \"\"}\n\t\t<div class=${`${rootClass}-text`}>${text}</div>\n\t</div>\n`;\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\nimport { Template as Divider } from \"@spectrum-css/divider/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Switch } from \"@spectrum-css/switch/stories/template.js\";\nimport { Template as Tray } from \"@spectrum-css/tray/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const MenuItem = ({\n\trootClass,\n\tlabel,\n\tdescription,\n\ticonName,\n\tisHighlighted = false,\n\tisActive = false,\n\tisSelected = false,\n\tisDisabled = false,\n\tisChecked = false,\n\tisFocused = false,\n\tisDrillIn = false,\n\tisCollapsible = false,\n\tisOpen = false,\n\tshouldTruncate,\n\trole = \"menuitem\",\n\titems = [],\n\tsize,\n\tid,\n\tidx = 0,\n\thasActions,\n\tselectionMode,\n\tvalue,\n\t...globals\n}) => html`\n  <li\n    class=${classMap({\n      [`${rootClass}`]: true,\n      \"is-highlighted\": isHighlighted,\n      \"is-active\": isActive,\n      \"is-focused\": isFocused,\n      \"is-selected\": isSelected,\n      \"is-disabled\": isDisabled,\n      [`${rootClass}--drillIn`]: isDrillIn,\n      [`${rootClass}--collapsible`]: isCollapsible,\n      \"is-open\": isOpen,\n    })}\n    id=${ifDefined(id)}\n    role=${ifDefined(role)}\n    aria-selected=${isSelected ? \"true\" : \"false\"}\n    aria-disabled=${isDisabled ? \"true\" : \"false\"}\n    tabindex=${ifDefined(!isDisabled ? \"0\" : undefined)}>\n    ${isCollapsible\n      ? Icon({\n          ...globals,\n          iconName: \"ChevronRight100\",\n          size,\n          customClasses: [\n            `${rootClass}Icon`,\n            \"spectrum-Menu-chevron\",\n          ],\n        }) : \"\"}\n    ${iconName\n      ? Icon({\n          ...globals,\n          iconName,\n          size,\n          customClasses: [\n            `${rootClass}Icon`,\n            `${rootClass}Icon--workflowIcon`\n          ]\n        }) : \"\"}\n    ${isCollapsible\n      ? html`<span class=\"spectrum-Menu-sectionHeading ${shouldTruncate ? \"spectrum-Menu-itemLabel--truncate\" : \"\" }\">${label}</span>`\n      : \"\"\n    }\n    ${selectionMode != \"multiple\" && !isCollapsible\n      ? html`<span class=${classMap({\n        [`${rootClass}Label`]: true,\n        [\"spectrum-Switch-label\"]: hasActions,\n        [\"spectrum-Menu-itemLabel--truncate\"]: shouldTruncate,\n        })}>\n        ${label}\n      </span>`\n      : \"\"}\n    ${typeof description != \"undefined\"\n      ? html`<span class=\"${rootClass}Description\">${description}</span>`\n      : \"\"}\n    ${isDrillIn\n      ? Icon({\n          ...globals,\n          iconName: \"ChevronRight100\",\n          size,\n          customClasses: [\n            `${rootClass}Icon`,\n            \"spectrum-Menu-chevron\",\n          ],\n        })\n      : \"\"}\n    ${when(selectionMode == \"multiple\", () =>  html`\n      ${Checkbox({\n        ...globals,\n        size,\n        isEmphasized: true,\n        isChecked: isSelected,\n        isDisabled,\n        id: `menu-checkbox-${idx}`,\n        customClasses: [\n          `${rootClass}Checkbox`,\n        ],\n      })}\n        <span  class=\"spectrum-Menu-itemLabel ${shouldTruncate ? \"spectrum-Menu-itemLabel--truncate\" : \"\" }\">${label}</span>\n        `)}\n      ${isChecked && selectionMode == \"single\"\n      ? Icon({\n          ...globals,\n          iconName: \"Checkmark100\",\n          size,\n          customClasses: [\n            `${rootClass}Icon`,\n            \"spectrum-Menu-checkmark\",\n          ],\n        })\n      : \"\"}\n      ${value\n        ? html`<span class=\"${rootClass}Value\">${value}</span>`\n        : \"\"}\n      ${hasActions\n        ? html`<div class=\"${rootClass}Actions\">\n        ${Switch({\n            ...globals,\n            size,\n            isChecked: isSelected,\n            isDisabled,\n            label: null,\n            id: `menu-switch-${idx}`,\n            customClasses: [\n              `${rootClass}Switch`,\n            ],\n          })}\n          </div>`\n        : \"\"}\n    ${isCollapsible && items.length > 0 ? Template({ ...globals, items, isOpen, size, shouldTruncate }) : \"\"}\n  </li>\n`;\n\n/**\n * Get the tray submenu back arrow name with scale number (defined in design spec).\n */\nconst backArrowWithScale = (size = \"m\", iconName = \"ArrowLeft\") => {\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\treturn `${iconName}200`;\n\t\tcase \"l\":\n\t\t\treturn `${iconName}400`;\n\t\tcase \"xl\":\n\t\t\treturn `${iconName}500`;\n\t\tdefault:\n\t\t\treturn `${iconName}300`;\n\t}\n};\n\nexport const MenuGroup = ({\n\theading,\n\tid,\n\tidx = 0,\n\titems = [],\n\tisDisabled = false,\n\tisSelectable = false,\n\tisTraySubmenu = false,\n\tshouldTruncate,\n\tmaxInlineSize,\n\tsubrole,\n\tsize,\n\t...globals\n}) => html`\n  <li\n    id=${ifDefined(id)}\n    role=\"presentation\"\n  >\n    ${!isTraySubmenu\n      ? html`<span\n          class=\"spectrum-Menu-sectionHeading ${shouldTruncate ? \"spectrum-Menu-itemLabel--truncate\" : \"\" }\"\n          id=${id ?? `menu-heading-category-${idx}`}\n          aria-hidden=\"true\"\n        >${heading}</span>`\n      : html`<div class=\"spectrum-Menu-back\">\n          <button aria-label=\"Back to previous menu\" class=\"spectrum-Menu-backButton\" type=\"button\" role=\"menuitem\">\n            ${Icon({\n              ...globals,\n              iconName: backArrowWithScale(size),\n              size,\n              customClasses: [\"spectrum-Menu-backIcon\"]\n            })}\n          </button>\n          ${heading\n          ? html`<span\n              class=\"spectrum-Menu-sectionHeading ${shouldTruncate ? \"spectrum-Menu-itemLabel--truncate\" : \"\" }\"\n              style=${maxInlineSize ? `max-inline-size: ${maxInlineSize}px;` : \"\"}\n              id=${id ?? `menu-heading-category-${idx}`}\n              aria-hidden=\"true\"\n              >${heading}</span\n            >`\n          : \"\"}\n        </div>`\n    }\n    ${Template({\n      ...globals,\n      role: \"group\",\n      subrole,\n      labelledby: id ?? `menu-heading-category-${idx}`,\n      items,\n      isDisabled,\n      isSelectable,\n      shouldTruncate: true,\n      maxInlineSize,\n      size,\n    })}\n  </li>\n`;\n\n\nexport const Template = ({\n\trootClass = \"spectrum-Menu\",\n\tlabelledby,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tsize,\n\tisDisabled = false,\n\tmaxInlineSize,\n\tshouldTruncate,\n\tselectionMode = \"none\",\n\tisOpen = false,\n\thasActions = false,\n\tisTraySubmenu = false,\n\titems = [],\n\trole = \"menu\",\n\tsubrole = \"menuitem\",\n\tid,\n\t...globals\n}) => {\n\tconst menuMarkup = html`\n    <ul\n      class=${classMap({\n        [rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        \"is-selectable\": selectionMode === \"single\",\n        \"is-selectableMultiple\": selectionMode === \"multiple\",\n        \"is-open\": isOpen,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-labelledby=${ifDefined(labelledby)}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      style=${maxInlineSize ? `max-inline-size: ${maxInlineSize};` : styleMap(customStyles)}\n    >\n      ${items.map((i, idx) => {\n        if (i.type === \"divider\")\n          return Divider({\n            ...globals,\n            tag: \"li\",\n            size: \"s\",\n            customClasses: [`${rootClass}-divider`],\n          });\n        else if (i.heading || i.isTraySubmenu)\n          return MenuGroup({\n            ...i,\n            ...globals,\n            subrole,\n            size,\n            selectionMode,\n            isTraySubmenu,\n            shouldTruncate\n          });\n        else\n          return MenuItem({\n            ...globals,\n            ...i,\n            idx,\n            rootClass: `${rootClass}-item`,\n            role: subrole,\n            size,\n            selectionMode,\n            shouldTruncate,\n            hasActions,\n          });\n      })}\n    </ul>\n  `;\n\n\tif (isTraySubmenu) {\n\t\treturn Tray({ content: [menuMarkup] });\n\t}\n\treturn menuMarkup;\n};\n","import { useArgs } from \"@storybook/preview-api\";\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as FieldLabel } from \"@spectrum-css/fieldlabel/stories/template.js\";\nimport { Template as HelpText } from \"@spectrum-css/helptext/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Popover } from \"@spectrum-css/popover/stories/template.js\";\nimport { Template as ProgressCircle } from \"@spectrum-css/progresscircle/stories/template.js\";\nimport { Template as Switch } from \"@spectrum-css/switch/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Picker = ({\n\trootClass = \"spectrum-Picker\",\n\tsize = \"m\",\n\tlabelPosition,\n\tplaceholder,\n\tisQuiet = false,\n\tisKeyboardFocused = false,\n\tisOpen = false,\n\tisInvalid = false,\n\tisLoading = false,\n\tisDisabled = false,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t}\n\tcatch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t<button\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t[`${rootClass}--sideLabel`]: labelPosition != \"top\",\n\t\t\t\t[\"is-invalid\"]: isInvalid,\n\t\t\t\t[\"is-open\"]: isOpen,\n\t\t\t\t[\"is-loading\"]: isLoading,\n\t\t\t\t[\"is-keyboardFocused\"]: isKeyboardFocused,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\t?disabled=${isDisabled}\n\t\t\taria-haspopup=\"listbox\"\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\ttype=\"button\"\n\t\t\t@click=${() => {\n\t\t\t\tupdateArgs({ isOpen: !isOpen });\n\t\t\t}}\n\t\t>\n\t\t\t<span class=\"${rootClass}-label is-placeholder\">${placeholder}</span>\n\t\t\t${isLoading\n\t\t\t\t? ProgressCircle({\n\t\t\t\t\tsize: \"s\",\n\t\t\t\t\tisIndeterminate: true,\n\t\t\t\t})\n\t\t\t\t: \"\"}\n\t\t\t${isInvalid && !isLoading\n\t\t\t\t? Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: \"Alert\",\n\t\t\t\t\tcustomClasses: [`${rootClass}-validationIcon`],\n\t\t\t\t})\n\t\t\t\t: \"\"}\n\t\t\t${Icon({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\tsetName: \"ui\",\n\t\t\t\ticonName: \"ChevronDown\",\n\t\t\t\tcustomClasses: [`${rootClass}-menuIcon`],\n\t\t\t})}\n\t\t</button>\n\t`;\n};\n\nexport const Template = ({\n\trootClass = \"spectrum-Picker\",\n\tsize = \"m\",\n\tlabel,\n\tlabelPosition = \"top\",\n\tplaceholder,\n\thelpText,\n\tisQuiet = false,\n\tisKeyboardFocused = false,\n\tisOpen = false,\n\tisInvalid = false,\n\tisLoading = false,\n\tisDisabled = false,\n\tisReadOnly = false,\n\twithSwitch = false,\n\tfieldLabelStyle = {},\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tcustomPopoverStyles = {},\n\tcontent = [],\n\tid,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t}\n\tcatch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconName = \"ChevronDown200\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonName = \"ChevronDown75\";\n\t\t\tbreak;\n\t\tcase \"m\":\n\t\t\ticonName = \"ChevronDown100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonName = \"ChevronDown300\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonName = \"ChevronDown200\";\n\t}\n\n\treturn html`\n\t\t${label\n\t\t\t? FieldLabel({\n\t\t\t\t...globals,\n\t\t\t\tsize,\n\t\t\t\tlabel,\n\t\t\t\tisDisabled,\n\t\t\t\tcustomStyles: fieldLabelStyle,\n\t\t\t\talignment: labelPosition,\n\t\t\t})\n\t\t\t: \"\"}\n\t\t${labelPosition == \"left\" ?\n\t\t\thtml`<div style=\"display: inline-block\">\n\t\t\t\t${Picker({\n\t\t\t\t\t...globals,\n\t\t\t\t\trootClass,\n\t\t\t\t\tsize,\n\t\t\t\t\tplaceholder,\n\t\t\t\t\tisQuiet,\n\t\t\t\t\tisKeyboardFocused,\n\t\t\t\t\tisOpen,\n\t\t\t\t\tisInvalid,\n\t\t\t\t\tisLoading,\n\t\t\t\t\tisDisabled,\n\t\t\t\t\tisReadOnly,\n\t\t\t\t\tcustomClasses,\n\t\t\t\t\tcustomStyles,\n\t\t\t\t\tcontent,\n\t\t\t\t\ticonName,\n\t\t\t\t\tlabelPosition,\n\t\t\t\t\tid,\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t`\n\t\t:\n\t\t\tPicker({\n\t\t\t\t...globals,\n\t\t\t\trootClass,\n\t\t\t\tsize,\n\t\t\t\tplaceholder,\n\t\t\t\tisQuiet,\n\t\t\t\tisKeyboardFocused,\n\t\t\t\tisOpen,\n\t\t\t\tisInvalid,\n\t\t\t\tisLoading,\n\t\t\t\tisDisabled,\n\t\t\t\tisReadOnly,\n\t\t\t\tcustomClasses,\n\t\t\t\tcustomStyles,\n\t\t\t\tcontent,\n\t\t\t\ticonName,\n\t\t\t\tlabelPosition,\n\t\t\t\tid,\n\t\t\t})\n\t\t}\n\n\t\t${helpText\n\t\t\t? HelpText({\n\t\t\t\ttext: helpText,\n\t\t\t\tvariant: isInvalid ? \"negative\" : \"neutral\",\n\t\t\t\thideIcon: true,\n\t\t\t})\n\t\t\t: \"\"}\n\t\t${when(content.length !== 0, () =>\n\t\t\t\tPopover({\n\t\t\t\t\t...globals,\n\t\t\t\t\tisOpen: isOpen && !isDisabled,\n\t\t\t\t\twithTip: false,\n\t\t\t\t\tposition: \"bottom\",\n\t\t\t\t\tisQuiet,\n\t\t\t\t\tcustomStyles: customPopoverStyles,\n\t\t\t\t\tcontent,\n\t\t\t\t})\n\t\t)}\n\t\t${when(withSwitch, () => Switch({\n\t\t\t...globals,\n\t\t\tsize,\n\t\t\tlabel: \"Toggle switch\",\n\t\t\tcustomStyles: {\n\t\t\t\t\"padding-inline-start\": \"15px\"\n\t\t\t}\n\t\t}))}\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/preview-api\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Popover\",\n\tsize = \"m\",\n\tisOpen = false,\n\twithTip = false,\n\tposition = \"top\",\n\tcustomClasses = [],\n\tid = \"popover-1\",\n\ttestId,\n\ttriggerId = \"trigger\",\n\tcustomStyles = {},\n\ttrigger,\n\tcontent = [],\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\tif (content.length === 0) {\n\t\tconsole.warn(\"Popover: No content provided.\");\n\t\treturn html``;\n\t}\n\n\n\tconst nestedPopover = id === \"popover-nested\" || id === \"popover-nested-2\";\n\n\treturn html`\n\t\t${when(typeof trigger === \"function\", () => trigger({\n\t\t\t...globals,\n\t\t\tisSelected: isOpen,\n\t\t\tisOpen: nestedPopover ?? true,\n\t\t\tonclick: () => {\n\t\t\t\t// Nested popover is static and open, so we don't need transforms for it\n\t\t\t\t!nestedPopover &&\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// No trigger? Nothing to do.\n\t\t\t\t\tif (!trigger || !position) return [];\n\n\t\t\t\t\t// Get trigger element and popover\n\t\t\t\t\tconst element = document.querySelector(`#${triggerId}`);\n\n\t\t\t\t\tif (!element) return [];\n\t\t\t\t\tconst rect = element.getBoundingClientRect();\n\t\t\t\t\tconst popover = document.querySelector(`#${id}`);\n\t\t\t\t\tif (!popover) return [];\n\n\t\t\t\t\tconst transforms = [];\n\t\t\t\t\tconst additionalStyles = {};\n\t\t\t\t\tconst triggerXCenter = (rect.left + rect.right) / 2;\n\t\t\t\t\tconst triggerYCenter = (rect.top + rect.bottom) / 2;\n\t\t\t\t\tconst popWidth = popover.offsetWidth ?? 0;\n\t\t\t\t\tconst popHeight = popover.offsetHeight ?? 0;\n\t\t\t\t\tconst textDir = getComputedStyle(document.querySelector(\"html\")).direction;\n\t\t\t\t\tlet x, y;\n\t\t\t\t\tlet xOffset = \"+ 0px\";\n\t\t\t\t\tlet yOffset = \"+ 0px\";\n\t\t\t\t\tif (position.includes(\"top\") || position.includes(\"bottom\") && !(position.includes(\"-top\") || position.includes(\"-bottom\"))) {\n\t\t\t\t\t\tx = triggerXCenter - (popWidth > 0 ? popWidth / 2 : popWidth);\n\t\t\t\t\t}\n\t\t\t\t\tif (position.includes(\"left\") || position.includes(\"right\")) {\n\t\t\t\t\t\ty = triggerYCenter - (popHeight > 0 ? popHeight / 2 : popHeight);\n\t\t\t\t\t}\n\t\t\t\t\tif (position.includes(\"top\") && !position.includes(\"-top\")) {\n\t\t\t\t\t\ty = rect.top - popHeight;\n\t\t\t\t\t\tyOffset = withTip\n\t\t\t\t\t\t\t? \"- (var(--spectrum-popover-pointer-height) + var(--spectrum-popover-animation-distance) - 1px)\"\n\t\t\t\t\t\t\t: \"- var(--spectrum-popover-animation-distance)\";\n\t\t\t\t\t}\n else if (position.includes(\"bottom\") && !position.includes(\"-bottom\")) {\n\t\t\t\t\t\ty = rect.bottom;\n\t\t\t\t\t\tyOffset = \"+ (var(--spectrum-popover-animation-distance))\";\n\t\t\t\t\t}\n else if (position.includes(\"left\")) {\n\t\t\t\t\t\tif (textDir == \"rtl\") {\n\t\t\t\t\t\t\tx = rect.right;\n\t\t\t\t\t\t\txOffset = withTip ? \"+ 0px\" : \"+ var(--spectrum-popover-animation-distance)\";\n\t\t\t\t\t\t}\n else {\n\t\t\t\t\t\t\tx = rect.left - popWidth;\n\t\t\t\t\t\t\txOffset = withTip\n\t\t\t\t\t\t\t\t? \"- ((var(--spectrum-popover-pointer-width) / 2) + var(--spectrum-popover-animation-distance) - 2px)\"\n\t\t\t\t\t\t\t\t: \"- var(--spectrum-popover-animation-distance)\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n else if (position.includes(\"right\")) {\n\t\t\t\t\t\tif (textDir == \"rtl\") {\n\t\t\t\t\t\t\tx = rect.left - popWidth;\n\t\t\t\t\t\t\txOffset = withTip\n\t\t\t\t\t\t\t\t? \"- ((var(--spectrum-popover-pointer-width) / 2) + var(--spectrum-popover-animation-distance) - 2px)\"\n\t\t\t\t\t\t\t\t: \"- var(--spectrum-popover-animation-distance)\";\n\t\t\t\t\t\t}\n else {\n\t\t\t\t\t\t\tx = rect.right;\n\t\t\t\t\t\t\txOffset = withTip ? \"+ 0px\" : \"+ var(--spectrum-popover-animation-distance)\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (x) transforms.push(`translateX(calc(var(--flow-direction) * calc(${parseInt(x, 10)}px ${xOffset})))`);\n\t\t\t\t\tif (y) transforms.push(`translateY(calc(${y}px ${yOffset}))`);\n\n\t\t\t\t\t// Add start and end styles\n\t\t\t\t\tif (position === \"top-start\" || position === \"bottom-start\") {\n\t\t\t\t\t\tadditionalStyles[\"inset-inline-start\"] = \"calc(\" + (popWidth / 2) + \"px - var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t\t}\n else if (position === \"top-end\" || position === \"bottom-end\") {\n\t\t\t\t\t\tadditionalStyles[\"inset-inline-start\"] = \"calc(-1 *\" + (popWidth / 2) + \"px + var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t\t}\n else if (position === \"left-top\" || position === \"right-top\") {\n\t\t\t\t\t\tadditionalStyles[\"inset-block-start\"] = \"calc(\" + (popHeight / 2) + \"px - var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t\t}\n else if (position === \"left-bottom\" || position === \"right-bottom\") {\n\t\t\t\t\t\tadditionalStyles[\"inset-block-start\"] = \"calc(-1 *\" + (popHeight / 2) + \"px + var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t\t}\n\n\t\t\t\t\tupdateArgs({\n\t\t\t\t\t\tisOpen: !isOpen,\n\t\t\t\t\t\tcustomStyles: {\n\t\t\t\t\t\t\t\"inset-inline-start\": \"0px\",\n\t\t\t\t\t\t\t\"inset-block-start\": \"0px\",\n\t\t\t\t\t\t\t...customStyles,\n\t\t\t\t\t\t\ttransform: transforms.join(\" \"),\n\t\t\t\t\t\t\t...additionalStyles,\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 100);\n\t\t\t\t}\n\t\t}))}\n\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--withTip`]: withTip,\n\t\t\t\t[`${rootClass}--${position}`]: typeof position !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\trole=\"presentation\"\n\t\t\tid=${ifDefined(id)}\n\t\t\tdata-testid=${ifDefined(testId)}\n\t\t>\n\t\t\t${content.map((c) => (typeof c === \"function\" ? c({}) : c))}\n\t\t\t${withTip\n\t\t\t\t? position && [\"top\", \"bottom\"].some((e) => position.startsWith(e))\n\t\t\t\t\t? html`<svg class=\"${rootClass}-tip\" viewBox=\"0 -0.5 16 9\" width=\"10\"><path class=\"${rootClass}-tip-triangle\" d=\"M-1,-1 8,8 17,-1\"></svg>`\n\t\t\t\t\t: html`<svg class=\"${rootClass}-tip\" viewBox=\"0 -0.5 9 16\" width=\"10\"><path class=\"${rootClass}-tip-triangle\" d=\"M-1,-1 8,8 -1,17\"></svg>`\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\tid,\n\tcustomStyles = {},\n\ttestId,\n\trootClass = \"spectrum-ProgressCircle\",\n\tcustomClasses = [],\n\tsize = \"m\",\n\tstaticColor,\n\tisIndeterminate = false,\n}) => {\n\tlet sizeClassName = \"medium\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\tsizeClassName = \"small\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\tsizeClassName = \"large\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsizeClassName = \"medium\";\n\t}\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${sizeClassName}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--indeterminate`]: isIndeterminate,\n\t\t\t\t[`${rootClass}--staticWhite`]: staticColor === \"white\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\tdata-testid=${ifDefined(testId)}\n\t\t>\n\t\t\t<div class=\"spectrum-ProgressCircle-track\"></div>\n\t\t\t<div class=\"spectrum-ProgressCircle-fills\">\n\t\t\t\t<div class=\"spectrum-ProgressCircle-fillMask1\">\n\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fillSubMask1\">\n\t\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fill\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"spectrum-ProgressCircle-fillMask2\">\n\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fillSubMask2\">\n\t\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fill\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Switch\",\n\tsize = \"m\",\n\tlabel = \"Switch label\",\n\tisDisabled,\n\tisChecked,\n\tisEmphasized,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n}) => {\n\n\t// ID attribute value for the input element.\n\tconst inputId = id ? `${id}-input` : \"switch-onoff-0\";\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--disabled`] : isDisabled,\n\t\t\t\t[`${rootClass}--emphasized`] : isEmphasized,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\tid=${inputId}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t?checked=${isChecked}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-switch\"></span>\n\t\t\t${label\n\t\t\t\t? html`<label class=\"${rootClass}-label\" for=${inputId}\n\t\t\t\t\t\t>${label}</label\n\t\t\t\t  >`\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { useArgs } from \"@storybook/preview-api\";\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as FieldLabel } from \"@spectrum-css/fieldlabel/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as ProgressCircle } from \"@spectrum-css/progresscircle/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Textfield\",\n\tsize = \"m\",\n\tcustomClasses = [],\n\tcustomInputClasses = [],\n\tcustomIconClasses = [],\n\tcustomProgressCircleClasses = [],\n\tisInvalid = false,\n\tisValid = false,\n\tmultiline = false,\n\tgrows = false,\n\tisQuiet = false,\n\tisFocused = false,\n\tisDisabled = false,\n\tisRequired = false,\n\tisReadOnly = false,\n\tisKeyboardFocused = false,\n\tisLoading = false,\n\tdisplayLabel = false,\n\tlabelPosition = \"top\",\n\tlabelText,\n\ticonName,\n\ticonSet,\n\tpattern,\n\tplaceholder,\n\tname,\n\tid,\n\tvalue,\n\ttype = \"text\",\n\tautocomplete = true,\n\tonclick,\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\tif (isInvalid) {\n\t\ticonName = \"Alert\";\n\t\ticonSet = \"workflow\";\n\t}\n\telse if (isValid) {\n\t\ticonName = \"Checkmark\";\n\t\ticonSet = \"ui\";\n\t}\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--multiline`]: multiline,\n\t\t\t\t[`${rootClass}--grows`]: grows,\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t[`${rootClass}--sideLabel`]: labelPosition === \"side\",\n\t\t\t\t\"is-invalid\": isInvalid,\n\t\t\t\t\"is-valid\": isValid,\n\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\"is-keyboardFocused\": isKeyboardFocused,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t\"is-readOnly\": isReadOnly,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\t@click=${onclick}\n\t\t\t@focusin=${(e) => {\n\t\t\t\tconst focusClass = e.target?.classList?.contains(\"focus-ring\")\n\t\t\t\t\t? { isKeyboardFocused: true }\n\t\t\t\t\t: { isFocused: true };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t\t@focusout=${(e) => {\n\t\t\t\tconst focusClass = e.target?.classList?.contains(\"focus-ring\")\n\t\t\t\t\t? { isKeyboardFocused: false }\n\t\t\t\t\t: { isFocused: false };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t${when(displayLabel, () => FieldLabel({\n\t\t\t...globals,\n\t\t\tsize,\n\t\t\tlabel: labelText,\n\t\t}))}\n\t\t${when(iconName, () => Icon({\n\t\t\t...globals,\n\t\t\tsize,\n\t\t\ticonName,\n\t\t\tsetName: iconSet,\n\t\t\tcustomClasses: [\n\t\t\t\tisInvalid || isValid\n\t\t\t\t\t? `${rootClass}-validationIcon`\n\t\t\t\t\t: `${rootClass}-icon`,\n\t\t\t\t...customIconClasses,\n\t\t\t],\n\t\t}))}\n\t\t${when(multiline,\n\t\t\t() => html`<textarea\n\t\t\t\tplaceholder=${ifDefined(placeholder)}\n\t\t\t\tname=${ifDefined(name)}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t\t.value=${ifDefined(value)}\n\t\t\t\tautocomplete=${autocomplete ? undefined : \"off\"}\n\t\t\t\t?required=${isRequired}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t?readonly=${ifDefined(isReadOnly)}\n\t\t\t\tpattern=${ifDefined(pattern)}\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-input`]: true,\n\t\t\t\t\t...customInputClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t/>`,\n\t\t\t() => html`<input\n\t\t\t\ttype=${ifDefined(type)}\n\t\t\t\tplaceholder=${ifDefined(placeholder)}\n\t\t\t\tname=${ifDefined(name)}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t\t.value=${ifDefined(value)}\n\t\t\t\tautocomplete=${autocomplete ? undefined : \"off\"}\n\t\t\t\t?required=${isRequired}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t?readonly=${ifDefined(isReadOnly)}\n\t\t\t\tpattern=${ifDefined(pattern)}\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-input`]: true,\n\t\t\t\t\t...customInputClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t/>`\n\t\t)}\n\t\t${when(isLoading, () => ProgressCircle({\n\t\t\tisIndeterminate: true,\n\t\t\tsize: \"s\",\n\t\t\tcustomClasses: customProgressCircleClasses,\n\t\t}))}\n\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"@spectrum-css/modal/index.css\";\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Tray\",\n\tisOpen = true,\n\tcontent = [],\n\tcustomClasses = [\"spectrum-Modal\"],\n\tcustomStyles = {},\n\tid,\n}) => html`\n\t\t<div\n\t\t\tclass=\"${rootClass}-wrapper\"\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t>\n\t\t\t${content.map((c) => (typeof c === \"function\" ? c({}) : c))}\n\t\t\t</div>\n\t\t</div>\n\t`;\n"],"names":[],"sourceRoot":""}