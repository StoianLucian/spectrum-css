{"version":3,"file":"accordion-stories-accordion-stories.d25132f4.iframe.bundle.js","mappings":";;;AA0FA;AAQA;;AAEA;;AAEA;;AA3EA;AAMA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;AAWA;;AAEA;AACA;;AAEA;;;AAoCA;;AAlBA;ACwCA;AACA;AAKA;AACA;AAMA;;AAKA;AAEA;;AC/HA;AAQA;AACA;;AAEA;;;ACEA;;AAmBA;AAIA;AACA;AAsBA;AAIA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAKA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AACA;AACA;AAKA","sources":["webpack://@spectrum-css/preview/../components/accordion/stories/template.js","webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/link/stories/template.js","webpack://@spectrum-css/preview/../components/typography/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { useArgs } from \"@storybook/preview-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const AccordionItem = ({\n\theading,\n\tcontent,\n\trootClass = \"spectrum-Accordion-item\",\n\tid,\n\tidx = 0,\n\tisDisabled = false,\n\tisOpen = false,\n\ticonSize = \"m\",\n\tcustomStyles = {},\n\tcustomClasses = [],\n\tonclick,\n\t...globals\n}) => html`\n\t<div\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t\"is-open\": isOpen && !isDisabled,\n\t\t\t\"is-disabled\": isDisabled,\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\tid=${ifDefined(id)}\n\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\trole=\"presentation\"\n\t\t@click=${onclick}\n\t>\n\t\t<!-- WAI-ARIA 1.1: Item header is a <button> wrapped within a <h3> element, rather than a <div> element with role=\"tab\" -->\n\t\t<h3 class=\"${rootClass}Heading\">\n\t\t\t<!-- WAI-ARIA 1.1: Item header <button> uses aria-expanded attribute to indicate expanded state. -->\n\t\t\t<button\n\t\t\t\tclass=\"${rootClass}Header\"\n\t\t\t\ttype=\"button\"\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\tid=\"spectrum-accordion-item-${idx}-header\"\n\t\t\t\taria-controls=\"spectrum-accordion-item-${idx}-content\"\n\t\t\t\taria-expanded=\"${open ? \"true\" : \"false\"}\"\n\t\t\t>\n\t\t\t\t${heading}\n\t\t\t</button>\n\t\t\t<span class=\"${rootClass}IconContainer\">\n\t\t\t\t${Icon({\n\t\t\t\t\ticonName: !isOpen ? \"ChevronRight\" : \"ChevronDown\",\n\t\t\t\t\tsetName: \"ui\",\n\t\t\t\t\tsize: iconSize,\n\t\t\t\t\tcustomClasses: [`${rootClass}Indicator`],\n\t\t\t\t\t...globals,\n\t\t\t\t})}\n\t\t\t</span>\n\t\t</h3>\n\t\t<!-- WAI-ARIA 1.1: Item content role changed from \"tabpanel\" to \"region\" -->\n\t\t<div\n\t\t\tclass=\"${rootClass}Content\"\n\t\t\trole=\"region\"\n\t\t\tid=\"spectrum-accordion-item-${idx}-content\"\n\t\t\taria-labelledby=\"spectrum-accordion-item-${idx}-header\"\n\t\t>\n\t\t\t${content}\n\t\t</div>\n\t</div>\n`;\n\nexport const Template = ({\n\trootClass = \"spectrum-Accordion\",\n\tsize = \"m\",\n\tdensity = \"regular\",\n\titems,\n\tid,\n\tdisableAll = false,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\tif (!items || !items.size) return html``;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=\"${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${density}`]:\n\t\t\t\t\ttypeof density !== \"undefined\" && density !== \"regular\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\"\n\t\t\tid=${ifDefined(id)}\n\t\t\trole=\"region\"\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t${repeat(Array.from(items.keys()), (heading, idx) => {\n\t\t\t\tconst item = items.get(heading);\n\t\t\t\treturn AccordionItem({\n\t\t\t\t\t...globals,\n\t\t\t\t\trootClass: `${rootClass}-item`,\n\t\t\t\t\theading,\n\t\t\t\t\tidx,\n\t\t\t\t\ticonSize: `${size}`,\n\t\t\t\t\tisDisabled: item.isDisabled || disableAll,\n\t\t\t\t\t...item,\n\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\tif (item.isDisabled) return;\n\n\t\t\t\t\t\t// Update the args\n\t\t\t\t\t\tconst newItems = new Map(items);\n\t\t\t\t\t\tnewItems.set(heading, {\n\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\tisOpen: !item.isOpen,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tupdateArgs({ items: newItems });\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})}\n\t\t</div>\n\t`;\n};\n",null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { capitalize, lowerCase } from \"lodash-es\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Link\",\n\turl = \"#\",\n\ttext,\n\tvariant,\n\tstaticColor,\n\tisQuiet = false,\n\tid,\n\tcustomClasses = [],\n}) => html`\n\t<a\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t[`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\tid=${ifDefined(id)}\n\t\thref=${ifDefined(url)}\n\t>\n\t\t${text}\n\t</a>\n`;\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { capitalize } from \"lodash-es\";\n\nimport \"@spectrum-css/typography/index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Typography\",\n\tsemantics = \"body\",\n\tsize = \"m\",\n\tvariant,\n\tweight,\n\tglyph = \"sans-serif\",\n\tid,\n\tcontent = [],\n\tcustomClasses = [],\n\tcustomStyles = {},\n}) => {\n\tif (!Array.isArray(content)) {\n\t\tcontent = [content];\n\t}\n\n\tconst contentLength = content.length;\n\n\t// If there is no content, return an empty string, no need for additional processing\n\tif (contentLength === 0) return html``;\n\n\tconst processedContent = html`\n\t\t${content.map((c) => {\n\t\t\t/* If the content is an object (but not a lit object), we need to merge the object with the template */\n\t\t\tif (typeof c !== \"string\" && (typeof c === \"object\" && !c._$litType$)) {\n\t\t\t\treturn Template({\n\t\t\t\t\trootClass,\n\t\t\t\t\tsemantics,\n\t\t\t\t\tsize,\n\t\t\t\t\tvariant,\n\t\t\t\t\tweight,\n\t\t\t\t\tglyph,\n\t\t\t\t\tid,\n\t\t\t\t\tcustomClasses,\n\t\t\t\t\t...c,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (typeof semantics === \"undefined\") {\n\t\t\t\treturn html`\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t\"spectrum-Typography\": true,\n\t\t\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t\t>${c}</div>`;\n\t\t\t}\n\n\t\t\trootClass = `spectrum-${capitalize(semantics)}`;\n\n\t\t\tconst classes = {\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${glyph}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" &&\n\t\t\t\t\ttypeof glyph !== \"undefined\" &&\n\t\t\t\t\tglyph !== \"sans-serif\",\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" && typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${weight}`]:\n\t\t\t\t\ttypeof semantics !== \"undefined\" && typeof weight !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t};\n\n\t\t\t/* Variants are additive and exist within the wrapper tags */\n\t\t\tif (variant && Array.isArray(variant)) {\n\t\t\t\tif ([\"strong\", \"emphasized\"].every((i) => variant.includes(i))) {\n\t\t\t\t\tc = html`<span\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t[`${rootClass}-strong`]: true,\n\t\t\t\t\t\t[`${rootClass}-emphasized`]: true,\n\t\t\t\t\t})}\n\t\t\t\t\t\t>${c}</span\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t\telse if (variant.includes(\"strong\")) {\n\t\t\t\t\tc = html`<strong\n\t\t\t\t\t\tclass=${classMap({ [`${rootClass}-strong`]: true })}\n\t\t\t\t\t\t>${c}</strong\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t\telse if (variant.includes(\"emphasized\")) {\n\t\t\t\t\tc = html`<em\n\t\t\t\t\t\tclass=${classMap({ [`${rootClass}-emphasized`]: true })}\n\t\t\t\t\t\t>${c}</em\n\t\t\t\t\t>`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (semantics === \"heading\")\n\t\t\t\treturn html`\n\t\t\t\t\t<h2 class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</h2>\n\t\t\t\t`;\n\n\t\t\tif (semantics === \"body\")\n\t\t\t\treturn html`\n\t\t\t\t\t<p class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</p>\n\t\t\t\t`;\n\n\t\t\tif (semantics === \"code\")\n\t\t\t\treturn html`\n\t\t\t\t\t<code class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</code>\n\t\t\t\t`;\n\n\t\t\treturn html`\n\t\t\t\t<span class=${classMap(classes)} style=${ifDefined(styleMap(customStyles))} id=${ifDefined(id)}>${c}</span>\n\t\t\t`;\n\t\t})}\n\t`;\n\n\t/** Wrap items with the spectrum-Typography wrapper if there are more than 1 items (this ensures correct margins) */\n\treturn html`${when(\n\t\tcontentLength > 1,\n\t\t() => html`<div class=\"spectrum-Typography\" id=${ifDefined(id)}>${processedContent}</div>`,\n\t\t() => processedContent\n\t)}`;\n};\n"],"names":[],"sourceRoot":""}