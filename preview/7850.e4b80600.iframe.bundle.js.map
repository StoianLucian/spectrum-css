{"version":3,"file":"7850.e4b80600.iframe.bundle.js","mappings":";AAwLA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA","sources":["webpack://@spectrum-css/preview/../components/icon/stories/template.js"],"sourcesContent":["import { html, svg } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { unsafeSVG } from \"lit/directives/unsafe-svg.js\";\n\nimport { fetchIconSVG, uiIcons, uiIconSizes, workflowIcons } from \"./utilities.js\";\n\nimport \"../index.css\";\n\n/**\n * @typedef { keyof import(\"./icon.stories.js\").default.args } IconArgs\n * @typedef { IconArgs & { scale: string, useRef: boolean, setName: 'workflow' | 'ui' } } IconProps\n */\n\n/**\n * Template for rendering an icon\n * @description Icon template that renders an icon based on the provided icon name and set name.\n * @param {IconProps} props\n * @param {string} props.rootClass\n * @param {\"xs\"|\"s\"|\"m\"|\"l\"|\"xl\"|\"xxl\"} props.size\n * @param {\"ui\"|\"workflow\"} props.setName\n * @param {string} props.iconName - Icon name with or without the icon scale number appended. Names with the scale (e.g. 75, 100) will replace it based upon the value of 'size'.\n * @param {string} props.fill\n * @param {string} props.id\n * @param {string[]} props.customClasses\n * @param {boolean} props.useRef\n * @returns {import('lit').TemplateResult<1>}\n */\nexport const Template = ({\n\trootClass = \"spectrum-Icon\",\n\tsize = \"m\",\n\tsetName,\n\ticonName,\n\tfill,\n\tid,\n\tcustomClasses = [],\n\tuseRef = false,\n\t...globals\n}) => {\n\tconst { scale } = globals;\n\n\tif (!iconName) {\n\t\tconsole.warn(\n\t\t\t\"Icon: Could not render a result because no icon name was provided to the icon template.\"\n\t\t);\n\t\treturn html``;\n\t}\n\n\tlet idKey = iconName;\n\n\t// If icon set was not provided, try determine which icon set contains this icon.\n\t// Note: icon sets can contain the same icon name, with different icons.\n\tif (![\"workflow\",\"ui\"].includes(setName)) {\n\t\tif (workflowIcons.includes(idKey)) {\n\t\t\tsetName = \"workflow\";\n\t\t}\n\t\telse if (uiIcons.includes(idKey.replace(/\\d{2,3}$/, \"\").replace(/(Right|Left|Down|Up)$/, \"\"))) {\n\t\t\tsetName = \"ui\";\n\t\t}\n\t}\n\n\tif (!setName) {\n\t\tconsole.warn(\n\t\t\t`Icon: Could not determine the icon set for the provided icon name: ${idKey}.`\n\t\t);\n\t\treturn html``;\n\t}\n\n\t// If a descriptor like Right, Left, Down, or Up is present for the UI icons Chevron or\n\t// Arrow, use that only for the class and not the icon fetch.\n\tif (\n\t\tsetName == \"ui\" &&\n\t\tuiIcons.some((c) => idKey.startsWith(c)) &&\n\t\t[\"Right\", \"Left\", \"Down\", \"Up\"].some((c) => idKey.includes(c))\n\t) {\n\t\tidKey = idKey.replace(/(Right|Left|Down|Up)/, \"\");\n\t}\n\n\t/**\n\t * Fallback UI Icon sizing number.\n\t *\n\t * If the icon name includes its scale, we want to leave that scale. This is preferred,\n\t * as UI icons do not use workflow icon sizing.\n\t *\n\t * If the UI icon name does not include scale, reformat it to match the provided sizing.\n\t * E.g. with a size of \"s\", the icon name \"ChevronRight\" would become \"ChevronRight75\".\n\t */\n\tif (\n\t\tsetName == \"ui\" &&\n\t\t// Exists in the list of available UI icons.\n\t\tuiIcons.includes(idKey.replace(/\\d{2,3}$/, \"\")) &&\n\t\t// Does not already have size number at the end.\n\t\t!idKey.match(/^(?!\\d).*\\d{2,3}$/) &&\n\t\t// Exclude some UI icons that do not (yet) have size numbers.\n\t\tuiIconSizes[idKey]?.length != 0\n\t) {\n\t\tlet sizeVal;\n\t\tswitch (size) {\n\t\t\tcase \"xs\":\n\t\t\tcase \"s\":\n\t\t\t\tsizeVal = \"75\";\n\t\t\t\tbreak;\n\t\t\tcase \"l\":\n\t\t\t\tsizeVal = \"200\";\n\t\t\t\tbreak;\n\t\t\tcase \"xl\":\n\t\t\tcase \"xxl\":\n\t\t\t\tsizeVal = \"300\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsizeVal = \"100\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tidKey += sizeVal;\n\t\ticonName += sizeVal;\n\t}\n\n\t// Fetch SVG file markup, and set optional fill color.\n\tlet inlineStyle;\n\tif (fill) inlineStyle = `color: ${fill}`;\n\tlet icon;\n\n\tif (!useRef) {\n\t\ticon = fetchIconSVG({ iconName: idKey, setName, ...globals });\n\n\t\tif (!icon) {\n\t\t\tconsole.warn(`Icon: \"${idKey}\" was not found in the \"${setName}\" icon set.`);\n\t\t\treturn html``;\n\t\t}\n\t}\n\n\t/**\n\t * Classes to apply to the SVG element. Object as used by the classMap function.\n\t * @type {[name: string]: string | boolean | number}\n\t */\n\tconst classList = {\n\t\t[rootClass]: true,\n\t\t[`spectrum-UIIcon-${iconName}`]: !!(setName === \"ui\"),\n\t\t[`${rootClass}--${scale}`]: !!(setName === \"ui\" && scale),\n\t\t[`${rootClass}--size${size?.toUpperCase()}`]: !!(\n\t\t\t(!setName || setName === \"workflow\") &&\n\t\t\tsize\n\t\t),\n\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t};\n\n\t// If we found an icon above, return that value with the appended class list\n\tif (icon) {\n\t\treturn svg`${unsafeSVG(\n\t\t\ticon.replace(\n\t\t\t\t/^<svg(.*)>/,\n\t\t\t\t`<svg class=\"${Object.entries(classList)\n\t\t\t\t\t.filter(([, v]) => v === true)\n\t\t\t\t\t.map(([k]) => k)\n\t\t\t\t\t.join(\" \")}\"${\n\t\t\t\t\tinlineStyle ? ` style=\"${inlineStyle}\"` : \"\"\n\t\t\t\t} focusable=\"false\" aria-hidden=\"true\" role=\"img\" $1>`\n\t\t\t)\n\t\t)}`;\n\t}\n\n\t// Otherwise, we need to render a reference to the icon\n\n\t// ui ID: #spectrum-css-icon-${idKey}\n\t// workflow ID: #spectrum-icon-(18|24)-${idKey}\n\tconst iconID =\n\t\tsetName !== \"workflow\"\n\t\t\t? `spectrum-css-icon-${idKey}`\n\t\t\t: `spectrum-icon-${scale !== \"medium\" ? \"24\" : \"18\"}-${idKey}`;\n\n\ttry {\n\t\timport(\n\t\t\t/* webpackPrefetch: true */ \"@adobe/spectrum-css-workflow-icons/dist/spectrum-icons.svg?raw\"\n\t\t);\n\t\timport(\n\t\t\t/* webpackPrefetch: true */ \"@spectrum-css/ui-icons/dist/spectrum-css-icons.svg?raw\"\n\t\t);\n\t}\n\tcatch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn svg`<svg\n\t\tclass=${classMap(classList)}\n\t\tid=${ifDefined(id)}\n\t\tstyle=${ifDefined(inlineStyle)}\n\t\tfocusable=\"false\"\n\t\taria-hidden=\"true\"\n\t\taria-labelledby=${idKey}\n\t\trole=\"img\"\n\t>\n\t\t<title id=${idKey}>${idKey.replace(/([A-Z])/g, \" $1\").trim()}</title>\n\t\t<use xlink:href=\"#${iconID}\" href=\"#${iconID}\" />\n\t</svg>`;\n};\n"],"names":[],"sourceRoot":""}