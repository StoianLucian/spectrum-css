{"version":3,"file":"sidenav-stories-sidenav-stories.a5503899.iframe.bundle.js","mappings":";;;AAoBA;AAMA;AAGA;AAKA;AAIA;AACA;AAMA;;;AAIA;AAKA;AACA;;;AAcA;;;AAYA;AAgBA;AAMA;AACA;AAMA;;AAEA;AACA;AACA;;;AASA","sources":["webpack://@spectrum-css/preview/../components/sidenav/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-SideNav\",\n\tcustomClasses = [],\n\tvariant,\n\thasIcon,\n\ticonName,\n\titems = [],\n\t...globals\n}) => html`\n  <nav>\n    <ul class=${classMap({\n      [rootClass]: true,\n      [`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n      [`${rootClass}--hasIcon`]: hasIcon,\n      ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n    })}>\n      ${repeat(items, (item) => item.id, (item) => {\n        if (typeof item.levelTwoItems !== \"undefined\") {\n          return html`\n            <li class=${classMap({\n              [`${rootClass}-item`]: true,\n              \"is-selected\": item.isSelected,\n              \"is-disabled\": item.isDisabled,\n            })}>\n            ${item.heading ?\n              html`<h2 class=\"${rootClass}-heading\" id=\"${item.id}-heading\">${item.heading}</h2>`\n              :\n              html`\n              <a class=\"${rootClass}-itemLink\">\n              ${when(hasIcon, () =>\n                Icon({\n                    ...globals,\n                    iconName,\n                  })\n                )}\n                <span class=\"${rootClass}-link-text\">${item.title}</span>\n              </a>\n              `\n            }\n            <ul class=${classMap({\n              [rootClass]: true,\n              [`${rootClass}--hasIcon`]: hasIcon,\n              ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n            })}\n            aria-labelledby=${ifDefined(item.heading) ? `${item.id}-heading` : \"\"}>\n                ${repeat(item.levelTwoItems, (item) => item.id, (item) => {\n                  return SideNavItem({\n                    variant,\n                    hasIcon,\n                    iconName,\n                    ...globals,\n                    ...item\n                  });\n                })}\n              </ul>\n            </li>\n          `;\n        }\nelse {\n          return SideNavItem({\n            hasIcon,\n            iconName,\n            ...globals,\n            ...item\n          });\n        }\n      })}\n    </ul>\n  </nav>\n`;\n\nexport const SideNavItem = ({\n\trootClass = \"spectrum-SideNav\",\n\tvariant,\n\tlevelThreeItems,\n\tlink,\n\ttitle,\n\tisSelected,\n\tisDisabled,\n\tid,\n\thasIcon,\n\ticonName,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst displayIcon = hasIcon & variant === \"multiLevel\" ? false : true;\n\treturn html`\n    <li id=${id} class=${classMap({\n      [`${rootClass}-item`]: true,\n      \"is-selected\": isSelected,\n      \"is-disabled\": isDisabled,\n      ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n    })}>\n      <a href=${link} class=\"${rootClass}-itemLink\">\n        ${displayIcon ?\n          Icon({\n            ...globals,\n            iconName,\n          })\n        : \"\"}\n        <span class=\"${rootClass}-link-text\">${title}</span>\n      </a>\n      ${when(levelThreeItems, () => html`\n        <ul class=${rootClass}>\n          ${repeat(levelThreeItems, (item) => item.id, (item) => {\n            return SideNavItem({\n              ...globals,\n              ...item\n            });\n          })}\n        </ul>`\n      )}\n    </li>\n  `;\n};\n"],"names":[],"sourceRoot":""}